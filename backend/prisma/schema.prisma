// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  STAFF
}

enum Unit {
  CAN        //Lon
  BOTTLE     //Lọ
  BOX        //Hộp
  KG         //Kilogram
  PACK       //Gói
  PIECE      //Cái
  SET        //Bộ
  CARTON     //Thùng
  L          //Lít
  Roll       //Cuộn
}

model User {
  id               Int      @id @default(autoincrement())
  username         String   @unique
  password         String
  fullName         String
  role             Role     @default(STAFF)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  isActive         Boolean  @default(true)
  refreshTokenHash String?

  goodsReceipts    GoodsReceipt[]
  saleTransactions SaleTransaction[]

  @@map("users")
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]

  @@map("categories")
}

model Supplier {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  contactInfo String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  goodsReceipts GoodsReceipt[]
  products      Product[]      @relation("ProductSuppliers")

  @@map("suppliers")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  sku         String   @unique
  description String?
  price       Decimal  @db.Decimal(12, 2)
  unit        Unit
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  suppliers    Supplier[]    @relation("ProductSuppliers")
  receiptItems ReceiptItem[]
  saleItems    SaleItem[]

  @@index([name, sku]) // Index tìm kiếm
  @@map("products")
}

model GoodsReceipt {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  totalAmount Decimal  @db.Decimal(12, 2)

  supplier   Supplier @relation(fields: [supplierId], references: [id])
  supplierId Int

  user   User @relation(fields: [userId], references: [id])
  userId Int

  items ReceiptItem[]

  @@map("goods_receipts")
}

model ReceiptItem {
  id                Int       @id @default(autoincrement())
  quantity          Int
  remainingQuantity Int
  importPrice       Decimal   @db.Decimal(12, 2)
  expiryDate        DateTime?

  receipt   GoodsReceipt @relation(fields: [receiptId], references: [id], onDelete: Cascade)
  receiptId Int

  product   Product @relation(fields: [productId], references: [id])
  productId Int

  @@map("receipt_items")
}

model SaleTransaction {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  totalAmount Decimal  @db.Decimal(12, 2)

  user   User @relation(fields: [userId], references: [id])
  userId Int

  items SaleItem[]

  @@index([createdAt]) // Index tìm theo ngày
  @@map("sale_transactions")
}

model SaleItem {
  id          Int     @id @default(autoincrement())
  quantity    Int
  priceAtSale Decimal @db.Decimal(12, 2)

  transaction   SaleTransaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  transactionId Int

  product   Product @relation(fields: [productId], references: [id])
  productId Int

  @@map("sale_items")
}
